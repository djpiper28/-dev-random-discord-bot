/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package dev.random.discord.bot;

import net.dv8tion.jda.api.JDA;
import net.dv8tion.jda.api.JDABuilder;
import net.dv8tion.jda.api.entities.Activity;
import net.dv8tion.jda.api.entities.Message;
import net.dv8tion.jda.api.entities.MessageChannel;
import net.dv8tion.jda.api.events.message.MessageReceivedEvent;
import net.dv8tion.jda.api.hooks.ListenerAdapter;
import net.dv8tion.jda.api.utils.Compression;
import net.dv8tion.jda.api.utils.cache.CacheFlag;

import javax.security.auth.login.LoginException;
import java.util.Random;

public class App {
    public static void main(String[] args) throws LoginException, InterruptedException {
        //Start
        JDABuilder builder = JDABuilder.createDefault(args[0]);

        // Disable parts of the cache
        builder.disableCache(CacheFlag.MEMBER_OVERRIDES, CacheFlag.VOICE_STATE);
        // Enable the bulk delete event
        builder.setBulkDeleteSplittingEnabled(true);
        // Disable compression (not recommended)
        builder.setCompression(Compression.NONE);
        // Set activity (like "playing Something")

        JDA jda = builder.build();
        jda.setAutoReconnect(true);
        jda.awaitReady();

        (new Thread(() -> {
            final String[] activities = {"rm -rf /", "Coding in HTML", "Debugging my debugger"};
            final Random rand = new Random();
            while (true) {
                jda.getPresence().setActivity(Activity.playing(activities[rand.nextInt(activities.length)]));

                // Wait
                long start = System.currentTimeMillis();
                while (System.currentTimeMillis() - start < 60000) {
                    try {
                        Thread.sleep(10000);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            }
        }, "Periodic activity changer thread")).start();

        jda.addEventListener(new ListenerAdapter() {
            @Override
            public void onMessageReceived(MessageReceivedEvent event) {
                if (!event.getAuthor().isBot()) {
                    String msg = event.getMessage().getContentRaw();
                }
            }
        });
    }

}
